# **Explanation: Longest Palindromic Substring**

## **Problem:** [Longest Palindromic Substring – LeetCode](https://leetcode.com/problems/longest-palindromic-substring/)

### **Difficulty Level:** Medium

---

## **Description**  
Given a string `s`, return the **longest palindromic substring** in `s`.

---

## **Examples**

**Input:**  
`s = "babad"`  
**Output:** `"bab"`  
**Explanation:** `"aba"` is also a valid answer.

**Input:**  
`s = "cbbd"`  
**Output:** `"bb"`

---

## **Approach**

### ✨ Expand Around Center

This approach checks for palindromes centered at each character (odd length) and each pair of characters (even length), expanding outwards while characters match.

For each index `i` in the string:
- Try expanding with center at `i` (odd-length palindrome).
- Try expanding with center between `i` and `i+1` (even-length palindrome).
- Track the longest palindrome found during the process.

### ✅ Why it works:
A palindrome mirrors around its center. There are 2n - 1 such centers in a string of length `n` (n odd + n-1 even).

---

## **Time Complexity:**  
- **O(n²)** – In the worst case, we expand around each character up to n times.

## **Space Complexity:**  
- **O(1)** – We use only constant extra space.

---

## **Code (Java)**

```java
public class Solution {
    public String longestPalindrome(String s) {
        if (s == null || s.length() < 1) return "";
        int start = 0, end = 0;

        for (int i = 0; i < s.length(); i++) {
            int len1 = expandFromCenter(s, i, i);        // Odd length
            int len2 = expandFromCenter(s, i, i + 1);    // Even length
            int len = Math.max(len1, len2);              // Take the max

            if (len > end - start) {
                start = i - (len - 1) / 2;               // Update start index
                end = i + len / 2;                       // Update end index
            }
        }

        return s.substring(start, end + 1);              // Return longest palindromic substring
    }

    private int expandFromCenter(String s, int left, int right) {
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        return right - left - 1; // Length of the current palindrome
    }
}
